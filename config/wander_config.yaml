solver:
  type: ilqr
  ilqr.tol: 0.01
  ilqr.constr_viol_tol: 0.01
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/soafwg
  ilqr.enable_gn: true
  ilqr.hxx_reg_base: 0.0
  ilqr.n_threads: 0
  print_time: 0

#constraints:
#  - rolling_contact_1
#  - rolling_contact_2
#  - rolling_contact_3
#  - rolling_contact_4

costs:
  - ee_force
  - velocity_regularization
  - acceleration_regularization
  - posture_base # only required if rolling contacts are NOT active


.define:
    - &w_vel 0.3 #0.025
    - &w_acc 1e-2
    - &w_e_f 1. # starting with zero weight for ee task
    - &wheel_radius 0.127
    - &w_postural_base 0. # starting with zero weight for base task

ee_force:
  type: Cartesian
  distal_link: wander_ft_sensor_link
  indices: [0, 1]
  nodes: 10
  weight: *w_e_f

posture_base:
  type: Cartesian
  distal_link: wander_base_link
  nodes: all
  indices: [0, 1, 2, 3, 4, 5]
  cartesian_type: velocity
  weight: *w_postural_base

rolling_contact_1:
  type: Rolling
  frame: J_wheel_A
  radius: *wheel_radius
  nodes: all

rolling_contact_2:
  type: Rolling
  frame: J_wheel_B
  radius: *wheel_radius
  nodes: all

rolling_contact_3:
  type: Rolling
  frame: J_wheel_C
  radius: *wheel_radius
  nodes: all

rolling_contact_4:
  type: Rolling
  frame: J_wheel_D
  radius: *wheel_radius
  nodes: all

velocity_regularization:
  type: Regularization
  variable_name: v
  nodes: all
  weight: *w_vel

acceleration_regularization:
  type: Regularization
  variable_name: a
  nodes: all
  weight: *w_acc # 0.01
